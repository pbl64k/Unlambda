The definitive paper on Unlambda by David Madore titled The Unlambda
Programming Language (and appropriately subtitled Unlambda: Your
Functional Programming Language Nightmares Come True) can be found at:

http://www.madore.org/~david/programs/unlambda/



This is an Unlambda 1 interpreter written in Perl back in 2005. As this
was my (almost) first close brush with functional programming, it didn't
really work out all that well. I tried to code it from the spec, without
understanding everything that was going on, but the spec itself was aimed
at people comfortable with lambda calculus and combinatory logic (which I
certainly wasn't back then). To add insult to the injury, available
implementations didn't quite agree with each other on how the language is
supposed to work, so that test programs produced different - sometimes
vastly so - results in different implementations. I wasn't quite up to
analyzing Unlambda programs by hand to figure out what are their actual
semantics (for that matter, the thought scares me still).

My biggest - and rather glaring - failure, though, was leaving call/cc
"for later" and failing to heed the inventor's advice to use CPS. When
"later" came, I was way above my head in it. Trying to just hack
something together without understanding the concepts I was dealing with
wasn't particularly bright either.

Run by:

    perl u.pl

Input the program and send an EOF (or just <file.unl in shell). The
interpeter will stop and await a linebreak from the stdout after parsing.
At this point the program will exist in memory as a collection of,
HOLY COW!!! I completely forgot about this madness, blessed closures.
Execution will commence after a linebreak, with potentially devastating
results for your swap file.

This should be good enough to execute anything not involving c, and may
not even choke on smallish programs with continuations. The space
requirements are somewhat outlandish in any case.
